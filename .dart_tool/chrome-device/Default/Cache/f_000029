define(['dart_sdk', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/painting/strut_style.dart', 'packages/flutter/src/gestures/tap.dart', 'packages/flutter/src/gestures/long_press.dart', 'packages/flutter/src/painting/basic_types.dart', 'packages/flutter/src/foundation/collections.dart', 'packages/flutter/src/foundation/object.dart', 'packages/flutter/src/gestures/recognizer.dart', 'packages/flutter/src/services/text_editing.dart'], (function load__packages__flutter__src__painting__placeholder_span_dart(dart_sdk, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__painting__strut_style$46dart, packages__flutter__src__gestures__tap$46dart, packages__flutter__src__gestures__long_press$46dart, packages__flutter__src__painting__basic_types$46dart, packages__flutter__src__foundation__collections$46dart, packages__flutter__src__foundation__object$46dart, packages__flutter__src__gestures__recognizer$46dart, packages__flutter__src__services__text_editing$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _interceptors = dart_sdk._interceptors;
  const _internal = dart_sdk._internal;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const text_style = packages__flutter__src__painting__strut_style$46dart.src__painting__text_style;
  const strut_style = packages__flutter__src__painting__strut_style$46dart.src__painting__strut_style;
  const tap = packages__flutter__src__gestures__tap$46dart.src__gestures__tap;
  const long_press = packages__flutter__src__gestures__long_press$46dart.src__gestures__long_press;
  const basic_types = packages__flutter__src__painting__basic_types$46dart.src__painting__basic_types;
  const collections = packages__flutter__src__foundation__collections$46dart.src__foundation__collections;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const recognizer = packages__flutter__src__gestures__recognizer$46dart.src__gestures__recognizer;
  const text_editing = packages__flutter__src__services__text_editing$46dart.src__services__text_editing;
  var placeholder_span = Object.create(dart.library);
  var text_span = Object.create(dart.library);
  var inline_span = Object.create(dart.library);
  var text_painter = Object.create(dart.library);
  var $add = dartx.add;
  var $runtimeType = dartx.runtimeType;
  var $hashCode = dartx.hashCode;
  var $codeUnitAt = dartx.codeUnitAt;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $isNotEmpty = dartx.isNotEmpty;
  var $isEmpty = dartx.isEmpty;
  var $ceilToDouble = dartx.ceilToDouble;
  var $clamp = dartx.clamp;
  var $first = dartx.first;
  var $last = dartx.last;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    EnumPropertyOfPlaceholderAlignment: () => (T.EnumPropertyOfPlaceholderAlignment = dart.constFn(diagnostics.EnumProperty$(ui.PlaceholderAlignment)))(),
    EnumPropertyOfTextBaseline: () => (T.EnumPropertyOfTextBaseline = dart.constFn(diagnostics.EnumProperty$(ui.TextBaseline)))(),
    InlineSpanTobool: () => (T.InlineSpanTobool = dart.constFn(dart.fnType(core.bool, [inline_span.InlineSpan])))(),
    JSArrayOfInlineSpanSemanticsInformation: () => (T.JSArrayOfInlineSpanSemanticsInformation = dart.constFn(_interceptors.JSArray$(inline_span.InlineSpanSemanticsInformation)))(),
    JSArrayOfDiagnosticsNode: () => (T.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(diagnostics.DiagnosticsNode)))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    DiagnosticsPropertyOfGestureRecognizer: () => (T.DiagnosticsPropertyOfGestureRecognizer = dart.constFn(diagnostics.DiagnosticsProperty$(recognizer.GestureRecognizer)))(),
    DiagnosticsNodeL: () => (T.DiagnosticsNodeL = dart.constFn(dart.legacy(diagnostics.DiagnosticsNode)))(),
    InlineSpanToDiagnosticsNode: () => (T.InlineSpanToDiagnosticsNode = dart.constFn(dart.fnType(diagnostics.DiagnosticsNode, [inline_span.InlineSpan])))(),
    TextWidthBasisL: () => (T.TextWidthBasisL = dart.constFn(dart.legacy(text_painter.TextWidthBasis)))(),
    VoidToint: () => (T.VoidToint = dart.constFn(dart.fnType(core.int, [])))(),
    JSArrayOfTextBox: () => (T.JSArrayOfTextBox = dart.constFn(_interceptors.JSArray$(ui.TextBox)))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: ui.PlaceholderAlignment.prototype,
        [_name]: "PlaceholderAlignment.bottom",
        index: 4
      });
    },
    get C1() {
      return C[1] = dart.constList([], T.DiagnosticsNodeL());
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: inline_span.InlineSpanSemanticsInformation.prototype,
        [requiresOwnNode]: true,
        [isPlaceholder$]: true,
        [recognizer$0]: null,
        [semanticsLabel$0]: null,
        [text$0]: "ï¿¼"
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: ui.Size.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 0
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: text_painter.PlaceholderDimensions.prototype,
        [baseline$0]: null,
        [baselineOffset$]: null,
        [alignment$0]: C[0] || CT.C0,
        [size$]: C[4] || CT.C4
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: text_painter.TextWidthBasis.prototype,
        [_name$]: "TextWidthBasis.parent",
        index: 0
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: text_painter.TextWidthBasis.prototype,
        [_name$]: "TextWidthBasis.longestLine",
        index: 1
      });
    },
    get C7() {
      return C[7] = dart.constList([C[5] || CT.C5, C[6] || CT.C6], T.TextWidthBasisL());
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_name]: "TextAlign.start",
        index: 4
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: ui.ParagraphConstraints.prototype,
        [ParagraphConstraints_width]: 1 / 0
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: ui.TextBaseline.prototype,
        [_name]: "TextBaseline.alphabetic",
        index: 0
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: ui.TextBaseline.prototype,
        [_name]: "TextBaseline.ideographic",
        index: 1
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_name]: "TextAlign.left",
        index: 0
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_name]: "TextAlign.right",
        index: 1
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_name]: "TextAlign.center",
        index: 2
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_name]: "TextDirection.rtl",
        index: 0
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_name]: "TextDirection.ltr",
        index: 1
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_name]: "TextAlign.justify",
        index: 3
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_name]: "TextAlign.end",
        index: 5
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: ui.TextAffinity.prototype,
        [_name]: "TextAffinity.upstream",
        index: 0
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: ui.TextAffinity.prototype,
        [_name]: "TextAffinity.downstream",
        index: 1
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: ui.BoxHeightStyle.prototype,
        [_name]: "BoxHeightStyle.tight",
        index: 0
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: ui.BoxWidthStyle.prototype,
        [_name]: "BoxWidthStyle.tight",
        index: 0
      });
    }
  }, false);
  var C = Array(23).fill(void 0);
  var I = [
    "file:///C:/src/flutter/packages/flutter/lib/src/painting/placeholder_span.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/painting/inline_span.dart",
    "package:flutter/src/painting/inline_span.dart",
    "package:flutter/src/painting/placeholder_span.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/painting/text_span.dart",
    "package:flutter/src/painting/text_span.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/painting/text_painter.dart",
    "package:flutter/src/painting/text_painter.dart"
  ];
  var alignment$ = dart.privateName(placeholder_span, "PlaceholderSpan.alignment");
  var baseline$ = dart.privateName(placeholder_span, "PlaceholderSpan.baseline");
  var _name = dart.privateName(ui, "_name");
  var style$ = dart.privateName(inline_span, "InlineSpan.style");
  inline_span.InlineSpan = class InlineSpan extends diagnostics.DiagnosticableTree {
    get style() {
      return this[style$];
    }
    set style(value) {
      super.style = value;
    }
    getSpanForPosition(position) {
      if (position == null) dart.nullFailed(I[1], 181, 47, "position");
      if (!dart.test(this.debugAssertIsValid())) dart.assertFailed(null, I[1], 182, 12, "debugAssertIsValid()");
      let offset = new inline_span.Accumulator.new();
      let result = null;
      this.visitChildren(dart.fn(span => {
        if (span == null) dart.nullFailed(I[1], 185, 31, "span");
        result = span.getSpanForPositionVisitor(position, offset);
        return result == null;
      }, T.InlineSpanTobool()));
      return result;
    }
    toPlainText(opts) {
      let includeSemanticsLabels = opts && 'includeSemanticsLabels' in opts ? opts.includeSemanticsLabels : true;
      if (includeSemanticsLabels == null) dart.nullFailed(I[1], 211, 28, "includeSemanticsLabels");
      let includePlaceholders = opts && 'includePlaceholders' in opts ? opts.includePlaceholders : true;
      if (includePlaceholders == null) dart.nullFailed(I[1], 211, 64, "includePlaceholders");
      let buffer = new core.StringBuffer.new();
      this.computeToPlainText(buffer, {includeSemanticsLabels: includeSemanticsLabels, includePlaceholders: includePlaceholders});
      return buffer.toString();
    }
    getSemanticsInformation() {
      let collector = T.JSArrayOfInlineSpanSemanticsInformation().of([]);
      this.computeSemanticsInformation(collector);
      return collector;
    }
    codeUnitAt(index) {
      if (index == null) dart.nullFailed(I[1], 261, 23, "index");
      if (dart.notNull(index) < 0) return null;
      let offset = new inline_span.Accumulator.new();
      let result = null;
      this.visitChildren(dart.fn(span => {
        if (span == null) dart.nullFailed(I[1], 266, 31, "span");
        result = span.codeUnitAtVisitor(index, offset);
        return result == null;
      }, T.InlineSpanTobool()));
      return result;
    }
    debugAssertIsValid() {
      return true;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) return false;
      return inline_span.InlineSpan.is(other) && dart.equals(other.style, this.style);
    }
    get hashCode() {
      return dart.hashCode(this.style);
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[1], 319, 56, "properties");
      super.debugFillProperties(properties);
      properties.defaultDiagnosticsTreeStyle = diagnostics.DiagnosticsTreeStyle.whitespace;
      if (this.style != null) {
        dart.nullCheck(this.style).debugFillProperties(properties);
      }
    }
  };
  (inline_span.InlineSpan.new = function(opts) {
    let style = opts && 'style' in opts ? opts.style : null;
    this[style$] = style;
    inline_span.InlineSpan.__proto__.new.call(this);
    ;
  }).prototype = inline_span.InlineSpan.prototype;
  dart.addTypeTests(inline_span.InlineSpan);
  dart.addTypeCaches(inline_span.InlineSpan);
  dart.setMethodSignature(inline_span.InlineSpan, () => ({
    __proto__: dart.getMethods(inline_span.InlineSpan.__proto__),
    getSpanForPosition: dart.fnType(dart.nullable(inline_span.InlineSpan), [ui.TextPosition]),
    toPlainText: dart.fnType(core.String, [], {includePlaceholders: core.bool, includeSemanticsLabels: core.bool}, {}),
    getSemanticsInformation: dart.fnType(core.List$(inline_span.InlineSpanSemanticsInformation), []),
    codeUnitAt: dart.fnType(dart.nullable(core.int), [core.int]),
    debugAssertIsValid: dart.fnType(core.bool, [])
  }));
  dart.setLibraryUri(inline_span.InlineSpan, I[2]);
  dart.setFieldSignature(inline_span.InlineSpan, () => ({
    __proto__: dart.getFields(inline_span.InlineSpan.__proto__),
    style: dart.finalFieldType(dart.nullable(text_style.TextStyle))
  }));
  dart.defineExtensionMethods(inline_span.InlineSpan, ['_equals']);
  dart.defineExtensionAccessors(inline_span.InlineSpan, ['hashCode']);
  placeholder_span.PlaceholderSpan = class PlaceholderSpan extends inline_span.InlineSpan {
    get alignment() {
      return this[alignment$];
    }
    set alignment(value) {
      super.alignment = value;
    }
    get baseline() {
      return this[baseline$];
    }
    set baseline(value) {
      super.baseline = value;
    }
    computeToPlainText(buffer, opts) {
      if (buffer == null) dart.nullFailed(I[0], 58, 40, "buffer");
      let includeSemanticsLabels = opts && 'includeSemanticsLabels' in opts ? opts.includeSemanticsLabels : true;
      if (includeSemanticsLabels == null) dart.nullFailed(I[0], 58, 54, "includeSemanticsLabels");
      let includePlaceholders = opts && 'includePlaceholders' in opts ? opts.includePlaceholders : true;
      if (includePlaceholders == null) dart.nullFailed(I[0], 58, 90, "includePlaceholders");
      if (dart.test(includePlaceholders)) {
        buffer.write("ï¿¼");
      }
    }
    computeSemanticsInformation(collector) {
      if (collector == null) dart.nullFailed(I[0], 65, 73, "collector");
      collector[$add](inline_span.InlineSpanSemanticsInformation.placeholder);
    }
    describeSemantics(offset, semanticsOffsets, semanticsElements) {
      if (offset == null) dart.nullFailed(I[0], 76, 38, "offset");
      if (semanticsOffsets == null) dart.nullFailed(I[0], 76, 56, "semanticsOffsets");
      if (semanticsElements == null) dart.nullFailed(I[0], 76, 88, "semanticsElements");
      semanticsOffsets[$add](offset.value);
      semanticsOffsets[$add](dart.notNull(offset.value) + 1);
      semanticsElements[$add](null);
      offset.increment(1);
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[0], 84, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T.EnumPropertyOfPlaceholderAlignment()).new("alignment", this.alignment, {defaultValue: null}));
      properties.add(new (T.EnumPropertyOfTextBaseline()).new("baseline", this.baseline, {defaultValue: null}));
    }
  };
  (placeholder_span.PlaceholderSpan.new = function(opts) {
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[0] || CT.C0;
    if (alignment == null) dart.nullFailed(I[0], 39, 10, "alignment");
    let baseline = opts && 'baseline' in opts ? opts.baseline : null;
    let style = opts && 'style' in opts ? opts.style : null;
    this[alignment$] = alignment;
    this[baseline$] = baseline;
    placeholder_span.PlaceholderSpan.__proto__.new.call(this, {style: style});
    ;
  }).prototype = placeholder_span.PlaceholderSpan.prototype;
  dart.addTypeTests(placeholder_span.PlaceholderSpan);
  dart.addTypeCaches(placeholder_span.PlaceholderSpan);
  dart.setMethodSignature(placeholder_span.PlaceholderSpan, () => ({
    __proto__: dart.getMethods(placeholder_span.PlaceholderSpan.__proto__),
    computeToPlainText: dart.fnType(dart.void, [core.StringBuffer], {includePlaceholders: core.bool, includeSemanticsLabels: core.bool}, {}),
    computeSemanticsInformation: dart.fnType(dart.void, [core.List$(inline_span.InlineSpanSemanticsInformation)]),
    describeSemantics: dart.fnType(dart.void, [inline_span.Accumulator, core.List$(core.int), core.List])
  }));
  dart.setLibraryUri(placeholder_span.PlaceholderSpan, I[3]);
  dart.setFieldSignature(placeholder_span.PlaceholderSpan, () => ({
    __proto__: dart.getFields(placeholder_span.PlaceholderSpan.__proto__),
    alignment: dart.finalFieldType(ui.PlaceholderAlignment),
    baseline: dart.finalFieldType(dart.nullable(ui.TextBaseline))
  }));
  var text$ = dart.privateName(text_span, "TextSpan.text");
  var children$ = dart.privateName(text_span, "TextSpan.children");
  var recognizer$ = dart.privateName(text_span, "TextSpan.recognizer");
  var semanticsLabel$ = dart.privateName(text_span, "TextSpan.semanticsLabel");
  text_span.TextSpan = class TextSpan extends inline_span.InlineSpan {
    get text() {
      return this[text$];
    }
    set text(value) {
      super.text = value;
    }
    get children() {
      return this[children$];
    }
    set children(value) {
      super.children = value;
    }
    get recognizer() {
      return this[recognizer$];
    }
    set recognizer(value) {
      super.recognizer = value;
    }
    get semanticsLabel() {
      return this[semanticsLabel$];
    }
    set semanticsLabel(value) {
      super.semanticsLabel = value;
    }
    build(builder, opts) {
      if (builder == null) dart.nullFailed(I[4], 195, 25, "builder");
      let textScaleFactor = opts && 'textScaleFactor' in opts ? opts.textScaleFactor : 1;
      if (textScaleFactor == null) dart.nullFailed(I[4], 196, 12, "textScaleFactor");
      let dimensions = opts && 'dimensions' in opts ? opts.dimensions : null;
      if (!dart.test(this.debugAssertIsValid())) dart.assertFailed(null, I[4], 199, 12, "debugAssertIsValid()");
      let hasStyle = this.style != null;
      if (hasStyle) builder.pushStyle(dart.nullCheck(this.style).getTextStyle({textScaleFactor: textScaleFactor}));
      if (this.text != null) builder.addText(dart.nullCheck(this.text));
      if (this.children != null) {
        for (let child of dart.nullCheck(this.children)) {
          if (!(child != null)) dart.assertFailed(null, I[4], 207, 16, "child != null");
          child.build(builder, {textScaleFactor: textScaleFactor, dimensions: dimensions});
        }
      }
      if (hasStyle) builder.pop();
    }
    visitChildren(visitor) {
      if (visitor == null) dart.nullFailed(I[4], 225, 40, "visitor");
      if (this.text != null) {
        if (!dart.test(visitor(this))) return false;
      }
      if (this.children != null) {
        for (let child of dart.nullCheck(this.children)) {
          if (!dart.test(child.visitChildren(visitor))) return false;
        }
      }
      return true;
    }
    getSpanForPositionVisitor(position, offset) {
      if (position == null) dart.nullFailed(I[4], 241, 54, "position");
      if (offset == null) dart.nullFailed(I[4], 241, 76, "offset");
      if (this.text == null) {
        return null;
      }
      let affinity = position.affinity;
      let targetOffset = position.offset;
      let endOffset = dart.notNull(offset.value) + dart.nullCheck(this.text).length;
      if (offset.value == targetOffset && affinity == ui.TextAffinity.downstream || dart.notNull(offset.value) < dart.notNull(targetOffset) && dart.notNull(targetOffset) < endOffset || endOffset === targetOffset && affinity == ui.TextAffinity.upstream) {
        return this;
      }
      offset.increment(dart.nullCheck(this.text).length);
      return null;
    }
    computeToPlainText(buffer, opts) {
      if (buffer == null) dart.nullFailed(I[4], 259, 18, "buffer");
      let includeSemanticsLabels = opts && 'includeSemanticsLabels' in opts ? opts.includeSemanticsLabels : true;
      if (includeSemanticsLabels == null) dart.nullFailed(I[4], 260, 10, "includeSemanticsLabels");
      let includePlaceholders = opts && 'includePlaceholders' in opts ? opts.includePlaceholders : true;
      if (includePlaceholders == null) dart.nullFailed(I[4], 261, 10, "includePlaceholders");
      if (!dart.test(this.debugAssertIsValid())) dart.assertFailed(null, I[4], 263, 12, "debugAssertIsValid()");
      if (this.semanticsLabel != null && dart.test(includeSemanticsLabels)) {
        buffer.write(this.semanticsLabel);
      } else if (this.text != null) {
        buffer.write(this.text);
      }
      if (this.children != null) {
        for (let child of dart.nullCheck(this.children)) {
          child.computeToPlainText(buffer, {includeSemanticsLabels: includeSemanticsLabels, includePlaceholders: includePlaceholders});
        }
      }
    }
    computeSemanticsInformation(collector) {
      if (collector == null) dart.nullFailed(I[4], 280, 73, "collector");
      if (!dart.test(this.debugAssertIsValid())) dart.assertFailed(null, I[4], 281, 12, "debugAssertIsValid()");
      if (this.text != null || this.semanticsLabel != null) {
        collector[$add](new inline_span.InlineSpanSemanticsInformation.new(dart.nullCheck(this.text), {semanticsLabel: this.semanticsLabel, recognizer: this.recognizer}));
      }
      if (this.children != null) {
        for (let child of dart.nullCheck(this.children)) {
          child.computeSemanticsInformation(collector);
        }
      }
    }
    codeUnitAtVisitor(index, offset) {
      if (index == null) dart.nullFailed(I[4], 297, 30, "index");
      if (offset == null) dart.nullFailed(I[4], 297, 49, "offset");
      if (this.text == null) {
        return null;
      }
      if (dart.notNull(index) - dart.notNull(offset.value) < dart.nullCheck(this.text).length) {
        return dart.nullCheck(this.text)[$codeUnitAt](dart.notNull(index) - dart.notNull(offset.value));
      }
      offset.increment(dart.nullCheck(this.text).length);
      return null;
    }
    describeSemantics(offset, semanticsOffsets, semanticsElements) {
      let t0, t0$;
      if (offset == null) dart.nullFailed(I[4], 317, 38, "offset");
      if (semanticsOffsets == null) dart.nullFailed(I[4], 317, 56, "semanticsOffsets");
      if (semanticsElements == null) dart.nullFailed(I[4], 317, 88, "semanticsElements");
      if (this.recognizer != null && (tap.TapGestureRecognizer.is(this.recognizer) || long_press.LongPressGestureRecognizer.is(this.recognizer))) {
        let length = (t0$ = (t0 = this.semanticsLabel, t0 == null ? null : t0.length), t0$ == null ? dart.nullCheck(this.text).length : t0$);
        semanticsOffsets[$add](offset.value);
        semanticsOffsets[$add](dart.notNull(offset.value) + dart.notNull(length));
        semanticsElements[$add](this.recognizer);
      }
      offset.increment(this.text != null ? dart.nullCheck(this.text).length : 0);
    }
    debugAssertIsValid() {
      if (!dart.test(dart.fn(() => {
        if (this.children != null) {
          for (let child of dart.nullCheck(this.children)) {
            if (child == null) {
              dart.throw(new assertions.FlutterError.fromParts(T.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("TextSpan contains a null child."), new assertions.ErrorDescription.new("A TextSpan object with a non-null child list should not have any nulls in its child list."), this.toDiagnosticsNode({name: "The full text in question was", style: diagnostics.DiagnosticsTreeStyle.errorProperty})])));
            }
            if (!dart.test(child.debugAssertIsValid())) dart.assertFailed(null, I[4], 355, 18, "child.debugAssertIsValid()");
          }
        }
        return true;
      }, T.VoidTobool())())) dart.assertFailed(null, I[4], 340, 12, "() {\r\n      if (children != null) {\r\n        for (final InlineSpan child in children!) {\r\n          // `child` has a non-nullable return type, but might be null when\r\n          // running with weak checking, so we need to null check it anyway (and\r\n          // ignore the warning that the null-handling logic is dead code).\r\n          if (child == null) { // ignore: dead_code\r\n            throw FlutterError.fromParts(<DiagnosticsNode>[\r\n              ErrorSummary('TextSpan contains a null child.'),\r\n              ErrorDescription(\r\n                  'A TextSpan object with a non-null child list should not have any nulls in its child list.'),\r\n              toDiagnosticsNode(name: 'The full text in question was',\r\n                  style: DiagnosticsTreeStyle.errorProperty),\r\n            ]);\r\n          }\r\n          assert(child.debugAssertIsValid());\r\n        }\r\n      }\r\n      return true;\r\n    }()");
      return super.debugAssertIsValid();
    }
    compareTo(other) {
      let t0, t0$;
      if (other == null) dart.nullFailed(I[4], 364, 41, "other");
      if (this === other) return basic_types.RenderComparison.identical;
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) return basic_types.RenderComparison.layout;
      let textSpan = text_span.TextSpan.as(other);
      if (textSpan.text != this.text || (t0 = this.children, t0 == null ? null : t0[$length]) != (t0$ = textSpan.children, t0$ == null ? null : t0$[$length]) || this.style == null !== (textSpan.style == null)) return basic_types.RenderComparison.layout;
      let result = dart.equals(this.recognizer, textSpan.recognizer) ? basic_types.RenderComparison.identical : basic_types.RenderComparison.metadata;
      if (this.style != null) {
        let candidate = dart.nullCheck(this.style).compareTo(dart.nullCheck(textSpan.style));
        if (dart.notNull(candidate.index) > dart.notNull(result.index)) result = candidate;
        if (result == basic_types.RenderComparison.layout) return result;
      }
      if (this.children != null) {
        for (let index = 0; index < dart.notNull(dart.nullCheck(this.children)[$length]); index = index + 1) {
          let candidate = dart.nullCheck(this.children)[$_get](index).compareTo(dart.nullCheck(textSpan.children)[$_get](index));
          if (dart.notNull(candidate.index) > dart.notNull(result.index)) result = candidate;
          if (result == basic_types.RenderComparison.layout) return result;
        }
      }
      return result;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) return false;
      if (!super._equals(other)) return false;
      return text_span.TextSpan.is(other) && other.text == this.text && dart.equals(other.recognizer, this.recognizer) && other.semanticsLabel == this.semanticsLabel && dart.test(collections.listEquals(inline_span.InlineSpan, other.children, this.children));
    }
    get hashCode() {
      return ui.hashValues(super.hashCode, this.text, this.recognizer, this.semanticsLabel, ui.hashList(this.children));
    }
    toStringShort() {
      return object.objectRuntimeType(this, "TextSpan");
    }
    debugFillProperties(properties) {
      let t0;
      if (properties == null) dart.nullFailed(I[4], 424, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new diagnostics.StringProperty.new("text", this.text, {showName: false, defaultValue: null}));
      if (this.style == null && this.text == null && this.children == null) properties.add(diagnostics.DiagnosticsNode.message("(empty)"));
      properties.add(new (T.DiagnosticsPropertyOfGestureRecognizer()).new("recognizer", this.recognizer, {description: (t0 = this.recognizer, t0 == null ? null : dart.toString(dart.runtimeType(t0))), defaultValue: null}));
      if (this.semanticsLabel != null) {
        properties.add(new diagnostics.StringProperty.new("semanticsLabel", this.semanticsLabel));
      }
    }
    debugDescribeChildren() {
      if (this.children == null) return C[1] || CT.C1;
      return dart.nullCheck(this.children)[$map](diagnostics.DiagnosticsNode, dart.fn(child => {
        if (child == null) dart.nullFailed(I[4], 453, 55, "child");
        if (child != null) {
          return child.toDiagnosticsNode();
        } else {
          return diagnostics.DiagnosticsNode.message("<null child>");
        }
      }, T.InlineSpanToDiagnosticsNode()))[$toList]();
    }
  };
  (text_span.TextSpan.new = function(opts) {
    let text = opts && 'text' in opts ? opts.text : null;
    let children = opts && 'children' in opts ? opts.children : null;
    let style = opts && 'style' in opts ? opts.style : null;
    let recognizer = opts && 'recognizer' in opts ? opts.recognizer : null;
    let semanticsLabel = opts && 'semanticsLabel' in opts ? opts.semanticsLabel : null;
    this[text$] = text;
    this[children$] = children;
    this[recognizer$] = recognizer;
    this[semanticsLabel$] = semanticsLabel;
    text_span.TextSpan.__proto__.new.call(this, {style: style});
    ;
  }).prototype = text_span.TextSpan.prototype;
  dart.addTypeTests(text_span.TextSpan);
  dart.addTypeCaches(text_span.TextSpan);
  dart.setMethodSignature(text_span.TextSpan, () => ({
    __proto__: dart.getMethods(text_span.TextSpan.__proto__),
    build: dart.fnType(dart.void, [ui.ParagraphBuilder], {dimensions: dart.nullable(core.List$(text_painter.PlaceholderDimensions)), textScaleFactor: core.double}, {}),
    visitChildren: dart.fnType(core.bool, [dart.fnType(core.bool, [inline_span.InlineSpan])]),
    getSpanForPositionVisitor: dart.fnType(dart.nullable(inline_span.InlineSpan), [ui.TextPosition, inline_span.Accumulator]),
    computeToPlainText: dart.fnType(dart.void, [core.StringBuffer], {includePlaceholders: core.bool, includeSemanticsLabels: core.bool}, {}),
    computeSemanticsInformation: dart.fnType(dart.void, [core.List$(inline_span.InlineSpanSemanticsInformation)]),
    codeUnitAtVisitor: dart.fnType(dart.nullable(core.int), [core.int, inline_span.Accumulator]),
    describeSemantics: dart.fnType(dart.void, [inline_span.Accumulator, core.List$(core.int), core.List]),
    compareTo: dart.fnType(basic_types.RenderComparison, [inline_span.InlineSpan])
  }));
  dart.setLibraryUri(text_span.TextSpan, I[5]);
  dart.setFieldSignature(text_span.TextSpan, () => ({
    __proto__: dart.getFields(text_span.TextSpan.__proto__),
    text: dart.finalFieldType(dart.nullable(core.String)),
    children: dart.finalFieldType(dart.nullable(core.List$(inline_span.InlineSpan))),
    recognizer: dart.finalFieldType(dart.nullable(recognizer.GestureRecognizer)),
    semanticsLabel: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(text_span.TextSpan, ['_equals']);
  dart.defineExtensionAccessors(text_span.TextSpan, ['hashCode']);
  var _value$ = dart.privateName(inline_span, "_value");
  inline_span.Accumulator = class Accumulator extends core.Object {
    get value() {
      return this[_value$];
    }
    increment(addend) {
      if (addend == null) dart.nullFailed(I[1], 28, 22, "addend");
      if (!(dart.notNull(addend) >= 0)) dart.assertFailed(null, I[1], 29, 12, "addend >= 0");
      this[_value$] = dart.notNull(this[_value$]) + dart.notNull(addend);
    }
  };
  (inline_span.Accumulator.new = function(_value = 0) {
    if (_value == null) dart.nullFailed(I[1], 21, 21, "_value");
    this[_value$] = _value;
    ;
  }).prototype = inline_span.Accumulator.prototype;
  dart.addTypeTests(inline_span.Accumulator);
  dart.addTypeCaches(inline_span.Accumulator);
  dart.setMethodSignature(inline_span.Accumulator, () => ({
    __proto__: dart.getMethods(inline_span.Accumulator.__proto__),
    increment: dart.fnType(dart.void, [core.int])
  }));
  dart.setGetterSignature(inline_span.Accumulator, () => ({
    __proto__: dart.getGetters(inline_span.Accumulator.__proto__),
    value: core.int
  }));
  dart.setLibraryUri(inline_span.Accumulator, I[2]);
  dart.setFieldSignature(inline_span.Accumulator, () => ({
    __proto__: dart.getFields(inline_span.Accumulator.__proto__),
    [_value$]: dart.fieldType(core.int)
  }));
  var text$0 = dart.privateName(inline_span, "InlineSpanSemanticsInformation.text");
  var semanticsLabel$0 = dart.privateName(inline_span, "InlineSpanSemanticsInformation.semanticsLabel");
  var recognizer$0 = dart.privateName(inline_span, "InlineSpanSemanticsInformation.recognizer");
  var isPlaceholder$ = dart.privateName(inline_span, "InlineSpanSemanticsInformation.isPlaceholder");
  var requiresOwnNode = dart.privateName(inline_span, "InlineSpanSemanticsInformation.requiresOwnNode");
  inline_span.InlineSpanSemanticsInformation = class InlineSpanSemanticsInformation extends core.Object {
    get text() {
      return this[text$0];
    }
    set text(value) {
      super.text = value;
    }
    get semanticsLabel() {
      return this[semanticsLabel$0];
    }
    set semanticsLabel(value) {
      super.semanticsLabel = value;
    }
    get recognizer() {
      return this[recognizer$0];
    }
    set recognizer(value) {
      super.recognizer = value;
    }
    get isPlaceholder() {
      return this[isPlaceholder$];
    }
    set isPlaceholder(value) {
      super.isPlaceholder = value;
    }
    get requiresOwnNode() {
      return this[requiresOwnNode];
    }
    set requiresOwnNode(value) {
      super.requiresOwnNode = value;
    }
    _equals(other) {
      if (other == null) return false;
      return inline_span.InlineSpanSemanticsInformation.is(other) && other.text == this.text && other.semanticsLabel == this.semanticsLabel && dart.equals(other.recognizer, this.recognizer) && other.isPlaceholder == this.isPlaceholder;
    }
    get hashCode() {
      return ui.hashValues(this.text, this.semanticsLabel, this.recognizer, this.isPlaceholder);
    }
    toString() {
      return dart.str(object.objectRuntimeType(this, "InlineSpanSemanticsInformation")) + "{text: " + dart.str(this.text) + ", semanticsLabel: " + dart.str(this.semanticsLabel) + ", recognizer: " + dart.str(this.recognizer) + "}";
    }
  };
  (inline_span.InlineSpanSemanticsInformation.new = function(text, opts) {
    if (text == null) dart.nullFailed(I[1], 56, 10, "text");
    let isPlaceholder = opts && 'isPlaceholder' in opts ? opts.isPlaceholder : false;
    if (isPlaceholder == null) dart.nullFailed(I[1], 57, 10, "isPlaceholder");
    let semanticsLabel = opts && 'semanticsLabel' in opts ? opts.semanticsLabel : null;
    let recognizer = opts && 'recognizer' in opts ? opts.recognizer : null;
    this[text$0] = text;
    this[isPlaceholder$] = isPlaceholder;
    this[semanticsLabel$0] = semanticsLabel;
    this[recognizer$0] = recognizer;
    if (!(text != null)) dart.assertFailed(null, I[1], 60, 15, "text != null");
    if (!(isPlaceholder != null)) dart.assertFailed(null, I[1], 61, 15, "isPlaceholder != null");
    if (!(isPlaceholder === false || text === "ï¿¼" && semanticsLabel == null && recognizer == null)) dart.assertFailed(null, I[1], 62, 15, "isPlaceholder == false || (text == '\\uFFFC' && semanticsLabel == null && recognizer == null)");
    this[requiresOwnNode] = dart.test(isPlaceholder) || recognizer != null;
    ;
  }).prototype = inline_span.InlineSpanSemanticsInformation.prototype;
  dart.addTypeTests(inline_span.InlineSpanSemanticsInformation);
  dart.addTypeCaches(inline_span.InlineSpanSemanticsInformation);
  dart.setLibraryUri(inline_span.InlineSpanSemanticsInformation, I[2]);
  dart.setFieldSignature(inline_span.InlineSpanSemanticsInformation, () => ({
    __proto__: dart.getFields(inline_span.InlineSpanSemanticsInformation.__proto__),
    text: dart.finalFieldType(core.String),
    semanticsLabel: dart.finalFieldType(dart.nullable(core.String)),
    recognizer: dart.finalFieldType(dart.nullable(recognizer.GestureRecognizer)),
    isPlaceholder: dart.finalFieldType(core.bool),
    requiresOwnNode: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(inline_span.InlineSpanSemanticsInformation, ['_equals', 'toString']);
  dart.defineExtensionAccessors(inline_span.InlineSpanSemanticsInformation, ['hashCode']);
  dart.defineLazy(inline_span.InlineSpanSemanticsInformation, {
    /*inline_span.InlineSpanSemanticsInformation.placeholder*/get placeholder() {
      return C[2] || CT.C2;
    }
  }, false);
  var size$ = dart.privateName(text_painter, "PlaceholderDimensions.size");
  var alignment$0 = dart.privateName(text_painter, "PlaceholderDimensions.alignment");
  var baselineOffset$ = dart.privateName(text_painter, "PlaceholderDimensions.baselineOffset");
  var baseline$0 = dart.privateName(text_painter, "PlaceholderDimensions.baseline");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  text_painter.PlaceholderDimensions = class PlaceholderDimensions extends core.Object {
    get size() {
      return this[size$];
    }
    set size(value) {
      super.size = value;
    }
    get alignment() {
      return this[alignment$0];
    }
    set alignment(value) {
      super.alignment = value;
    }
    get baselineOffset() {
      return this[baselineOffset$];
    }
    set baselineOffset(value) {
      super.baselineOffset = value;
    }
    get baseline() {
      return this[baseline$0];
    }
    set baseline(value) {
      super.baseline = value;
    }
    toString() {
      return "PlaceholderDimensions(" + dart.str(this.size) + ", " + dart.str(this.baseline) + ")";
    }
  };
  (text_painter.PlaceholderDimensions.new = function(opts) {
    let size = opts && 'size' in opts ? opts.size : null;
    if (size == null) dart.nullFailed(I[6], 45, 19, "size");
    let alignment = opts && 'alignment' in opts ? opts.alignment : null;
    if (alignment == null) dart.nullFailed(I[6], 46, 19, "alignment");
    let baseline = opts && 'baseline' in opts ? opts.baseline : null;
    let baselineOffset = opts && 'baselineOffset' in opts ? opts.baselineOffset : null;
    this[size$] = size;
    this[alignment$0] = alignment;
    this[baseline$0] = baseline;
    this[baselineOffset$] = baselineOffset;
    if (!(size != null)) dart.assertFailed(null, I[6], 49, 15, "size != null");
    if (!(alignment != null)) dart.assertFailed(null, I[6], 50, 15, "alignment != null");
    ;
  }).prototype = text_painter.PlaceholderDimensions.prototype;
  dart.addTypeTests(text_painter.PlaceholderDimensions);
  dart.addTypeCaches(text_painter.PlaceholderDimensions);
  dart.setLibraryUri(text_painter.PlaceholderDimensions, I[7]);
  dart.setFieldSignature(text_painter.PlaceholderDimensions, () => ({
    __proto__: dart.getFields(text_painter.PlaceholderDimensions.__proto__),
    size: dart.finalFieldType(ui.Size),
    alignment: dart.finalFieldType(ui.PlaceholderAlignment),
    baselineOffset: dart.finalFieldType(dart.nullable(core.double)),
    baseline: dart.finalFieldType(dart.nullable(ui.TextBaseline))
  }));
  dart.defineExtensionMethods(text_painter.PlaceholderDimensions, ['toString']);
  dart.defineLazy(text_painter.PlaceholderDimensions, {
    /*text_painter.PlaceholderDimensions.empty*/get empty() {
      return C[3] || CT.C3;
    }
  }, false);
  var _name$ = dart.privateName(text_painter, "_name");
  text_painter.TextWidthBasis = class TextWidthBasis extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (text_painter.TextWidthBasis.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[6], 92, 6, "index");
    if (_name == null) dart.nullFailed(I[6], 92, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = text_painter.TextWidthBasis.prototype;
  dart.addTypeTests(text_painter.TextWidthBasis);
  dart.addTypeCaches(text_painter.TextWidthBasis);
  dart.setLibraryUri(text_painter.TextWidthBasis, I[7]);
  dart.setFieldSignature(text_painter.TextWidthBasis, () => ({
    __proto__: dart.getFields(text_painter.TextWidthBasis.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(text_painter.TextWidthBasis, ['toString']);
  text_painter.TextWidthBasis.parent = C[5] || CT.C5;
  text_painter.TextWidthBasis.longestLine = C[6] || CT.C6;
  text_painter.TextWidthBasis.values = C[7] || CT.C7;
  var offset$ = dart.privateName(text_painter, "_CaretMetrics.offset");
  var fullHeight$ = dart.privateName(text_painter, "_CaretMetrics.fullHeight");
  text_painter._CaretMetrics = class _CaretMetrics extends core.Object {
    get offset() {
      return this[offset$];
    }
    set offset(value) {
      super.offset = value;
    }
    get fullHeight() {
      return this[fullHeight$];
    }
    set fullHeight(value) {
      super.fullHeight = value;
    }
  };
  (text_painter._CaretMetrics.new = function(opts) {
    let offset = opts && 'offset' in opts ? opts.offset : null;
    if (offset == null) dart.nullFailed(I[6], 108, 38, "offset");
    let fullHeight = opts && 'fullHeight' in opts ? opts.fullHeight : null;
    this[offset$] = offset;
    this[fullHeight$] = fullHeight;
    ;
  }).prototype = text_painter._CaretMetrics.prototype;
  dart.addTypeTests(text_painter._CaretMetrics);
  dart.addTypeCaches(text_painter._CaretMetrics);
  dart.setLibraryUri(text_painter._CaretMetrics, I[7]);
  dart.setFieldSignature(text_painter._CaretMetrics, () => ({
    __proto__: dart.getFields(text_painter._CaretMetrics.__proto__),
    offset: dart.finalFieldType(ui.Offset),
    fullHeight: dart.finalFieldType(dart.nullable(core.double))
  }));
  var _paragraph = dart.privateName(text_painter, "_paragraph");
  var _needsLayout = dart.privateName(text_painter, "_needsLayout");
  var _layoutTemplate = dart.privateName(text_painter, "_layoutTemplate");
  var _inlinePlaceholderBoxes = dart.privateName(text_painter, "_inlinePlaceholderBoxes");
  var _inlinePlaceholderScales = dart.privateName(text_painter, "_inlinePlaceholderScales");
  var _placeholderDimensions = dart.privateName(text_painter, "_placeholderDimensions");
  var _lastMinWidth = dart.privateName(text_painter, "_lastMinWidth");
  var _lastMaxWidth = dart.privateName(text_painter, "_lastMaxWidth");
  var __TextPainter__caretMetrics = dart.privateName(text_painter, "_#TextPainter#_caretMetrics");
  var __TextPainter__caretMetrics_isSet = dart.privateName(text_painter, "_#TextPainter#_caretMetrics#isSet");
  var _previousCaretPosition = dart.privateName(text_painter, "_previousCaretPosition");
  var _previousCaretPrototype = dart.privateName(text_painter, "_previousCaretPrototype");
  var _text = dart.privateName(text_painter, "_text");
  var _textAlign = dart.privateName(text_painter, "_textAlign");
  var _textDirection = dart.privateName(text_painter, "_textDirection");
  var _textScaleFactor = dart.privateName(text_painter, "_textScaleFactor");
  var _maxLines = dart.privateName(text_painter, "_maxLines");
  var _ellipsis = dart.privateName(text_painter, "_ellipsis");
  var _locale = dart.privateName(text_painter, "_locale");
  var _strutStyle = dart.privateName(text_painter, "_strutStyle");
  var _textWidthBasis = dart.privateName(text_painter, "_textWidthBasis");
  var _textHeightBehavior = dart.privateName(text_painter, "_textHeightBehavior");
  var _createParagraphStyle = dart.privateName(text_painter, "_createParagraphStyle");
  var ParagraphConstraints_width = dart.privateName(ui, "ParagraphConstraints.width");
  var _applyFloatingPointHack = dart.privateName(text_painter, "_applyFloatingPointHack");
  var _emptyOffset = dart.privateName(text_painter, "_emptyOffset");
  var _getRectFromUpstream = dart.privateName(text_painter, "_getRectFromUpstream");
  var _getRectFromDownstream = dart.privateName(text_painter, "_getRectFromDownstream");
  var _computeCaretMetrics = dart.privateName(text_painter, "_computeCaretMetrics");
  var _caretMetrics = dart.privateName(text_painter, "_caretMetrics");
  text_painter.TextPainter = class TextPainter extends core.Object {
    markNeedsLayout() {
      this[_paragraph] = null;
      this[_needsLayout] = true;
      this[_previousCaretPosition] = null;
      this[_previousCaretPrototype] = null;
    }
    get text() {
      return this[_text];
    }
    set text(value) {
      let t0, t0$;
      if (!(value == null || dart.test(value.debugAssertIsValid()))) dart.assertFailed(null, I[6], 199, 12, "value == null || value.debugAssertIsValid()");
      if (dart.equals(this[_text], value)) return;
      if (!dart.equals((t0 = this[_text], t0 == null ? null : t0.style), (t0$ = value, t0$ == null ? null : t0$.style))) this[_layoutTemplate] = null;
      this[_text] = value;
      this.markNeedsLayout();
    }
    get textAlign() {
      return this[_textAlign];
    }
    set textAlign(value) {
      if (value == null) dart.nullFailed(I[6], 215, 27, "value");
      if (!(value != null)) dart.assertFailed(null, I[6], 216, 12, "value != null");
      if (this[_textAlign] == value) return;
      this[_textAlign] = value;
      this.markNeedsLayout();
    }
    get textDirection() {
      return this[_textDirection];
    }
    set textDirection(value) {
      if (this[_textDirection] == value) return;
      this[_textDirection] = value;
      this.markNeedsLayout();
      this[_layoutTemplate] = null;
    }
    get textScaleFactor() {
      return this[_textScaleFactor];
    }
    set textScaleFactor(value) {
      if (value == null) dart.nullFailed(I[6], 256, 30, "value");
      if (!(value != null)) dart.assertFailed(null, I[6], 257, 12, "value != null");
      if (this[_textScaleFactor] == value) return;
      this[_textScaleFactor] = value;
      this.markNeedsLayout();
      this[_layoutTemplate] = null;
    }
    get ellipsis() {
      return this[_ellipsis];
    }
    set ellipsis(value) {
      if (!(value == null || value[$isNotEmpty])) dart.assertFailed(null, I[6], 284, 12, "value == null || value.isNotEmpty");
      if (this[_ellipsis] == value) return;
      this[_ellipsis] = value;
      this.markNeedsLayout();
    }
    get locale() {
      return this[_locale];
    }
    set locale(value) {
      if (dart.equals(this[_locale], value)) return;
      this[_locale] = value;
      this.markNeedsLayout();
    }
    get maxLines() {
      return this[_maxLines];
    }
    set maxLines(value) {
      if (!(value == null || dart.notNull(value) > 0)) dart.assertFailed(null, I[6], 312, 12, "value == null || value > 0");
      if (this[_maxLines] == value) return;
      this[_maxLines] = value;
      this.markNeedsLayout();
    }
    get strutStyle() {
      return this[_strutStyle];
    }
    set strutStyle(value) {
      if (dart.equals(this[_strutStyle], value)) return;
      this[_strutStyle] = value;
      this.markNeedsLayout();
    }
    get textWidthBasis() {
      return this[_textWidthBasis];
    }
    set textWidthBasis(value) {
      if (value == null) dart.nullFailed(I[6], 345, 37, "value");
      if (!(value != null)) dart.assertFailed(null, I[6], 346, 12, "value != null");
      if (this[_textWidthBasis] == value) return;
      this[_textWidthBasis] = value;
      this.markNeedsLayout();
    }
    get textHeightBehavior() {
      return this[_textHeightBehavior];
    }
    set textHeightBehavior(value) {
      if (dart.equals(this[_textHeightBehavior], value)) return;
      this[_textHeightBehavior] = value;
      this.markNeedsLayout();
    }
    get inlinePlaceholderBoxes() {
      return this[_inlinePlaceholderBoxes];
    }
    get inlinePlaceholderScales() {
      return this[_inlinePlaceholderScales];
    }
    setPlaceholderDimensions(value) {
      if (value == null || dart.test(value[$isEmpty]) || dart.test(collections.listEquals(text_painter.PlaceholderDimensions, value, this[_placeholderDimensions]))) {
        return;
      }
      if (!(dart.fn(() => {
        let placeholderCount = 0;
        dart.nullCheck(this.text).visitChildren(dart.fn(span => {
          if (span == null) dart.nullFailed(I[6], 398, 39, "span");
          if (placeholder_span.PlaceholderSpan.is(span)) {
            placeholderCount = placeholderCount + 1;
          }
          return true;
        }, T.InlineSpanTobool()));
        return placeholderCount;
      }, T.VoidToint())() == value[$length])) dart.assertFailed(null, I[6], 396, 12, "() {\r\n      int placeholderCount = 0;\r\n      text!.visitChildren((InlineSpan span) {\r\n        if (span is PlaceholderSpan) {\r\n          placeholderCount += 1;\r\n        }\r\n        return true;\r\n      });\r\n      return placeholderCount;\r\n    }() == value.length");
      this[_placeholderDimensions] = value;
      this.markNeedsLayout();
    }
    [_createParagraphStyle](defaultTextDirection = null) {
      let t1, t0, t1$, t0$;
      if (!(this.textAlign != null)) dart.assertFailed(null, I[6], 414, 12, "textAlign != null");
      if (!(this.textDirection != null || defaultTextDirection != null)) dart.assertFailed("TextPainter.textDirection must be set to a non-null value before using the TextPainter.", I[6], 415, 12, "textDirection != null || defaultTextDirection != null");
      t0$ = (t0 = dart.nullCheck(this[_text]).style, t0 == null ? null : t0.getParagraphStyle({textAlign: this.textAlign, textDirection: (t1 = this.textDirection, t1 == null ? defaultTextDirection : t1), textScaleFactor: this.textScaleFactor, maxLines: this[_maxLines], textHeightBehavior: this[_textHeightBehavior], ellipsis: this[_ellipsis], locale: this[_locale], strutStyle: this[_strutStyle]}));
      return t0$ == null ? ui.ParagraphStyle.new({textAlign: this.textAlign, textDirection: (t1$ = this.textDirection, t1$ == null ? defaultTextDirection : t1$), fontSize: 14 * dart.notNull(this.textScaleFactor), maxLines: this.maxLines, textHeightBehavior: this[_textHeightBehavior], ellipsis: this.ellipsis, locale: this.locale}) : t0$;
    }
    get preferredLineHeight() {
      let t0, t0$;
      if (this[_layoutTemplate] == null) {
        let builder = ui.ParagraphBuilder.new(this[_createParagraphStyle](ui.TextDirection.rtl));
        if ((t0 = this.text, t0 == null ? null : t0.style) != null) builder.pushStyle(dart.nullCheck(dart.nullCheck(this.text).style).getTextStyle({textScaleFactor: this.textScaleFactor}));
        builder.addText(" ");
        this[_layoutTemplate] = (t0$ = builder.build(), (() => {
          t0$.layout(C[9] || CT.C9);
          return t0$;
        })());
      }
      return dart.nullCheck(this[_layoutTemplate]).height;
    }
    [_applyFloatingPointHack](layoutValue) {
      if (layoutValue == null) dart.nullFailed(I[6], 472, 41, "layoutValue");
      return layoutValue[$ceilToDouble]();
    }
    get minIntrinsicWidth() {
      if (!!dart.test(this[_needsLayout])) dart.assertFailed(null, I[6], 481, 12, "!_needsLayout");
      return this[_applyFloatingPointHack](dart.nullCheck(this[_paragraph]).minIntrinsicWidth);
    }
    get maxIntrinsicWidth() {
      if (!!dart.test(this[_needsLayout])) dart.assertFailed(null, I[6], 489, 12, "!_needsLayout");
      return this[_applyFloatingPointHack](dart.nullCheck(this[_paragraph]).maxIntrinsicWidth);
    }
    get width() {
      if (!!dart.test(this[_needsLayout])) dart.assertFailed(null, I[6], 497, 12, "!_needsLayout");
      return this[_applyFloatingPointHack](this.textWidthBasis == text_painter.TextWidthBasis.longestLine ? dart.nullCheck(this[_paragraph]).longestLine : dart.nullCheck(this[_paragraph]).width);
    }
    get height() {
      if (!!dart.test(this[_needsLayout])) dart.assertFailed(null, I[6], 507, 12, "!_needsLayout");
      return this[_applyFloatingPointHack](dart.nullCheck(this[_paragraph]).height);
    }
    get size() {
      if (!!dart.test(this[_needsLayout])) dart.assertFailed(null, I[6], 515, 12, "!_needsLayout");
      return new ui.Size.new(this.width, this.height);
    }
    computeDistanceToActualBaseline(baseline) {
      if (baseline == null) dart.nullFailed(I[6], 523, 55, "baseline");
      if (!!dart.test(this[_needsLayout])) dart.assertFailed(null, I[6], 524, 12, "!_needsLayout");
      if (!(baseline != null)) dart.assertFailed(null, I[6], 525, 12, "baseline != null");
      switch (baseline) {
        case C[10] || CT.C10:
        {
          return dart.nullCheck(this[_paragraph]).alphabeticBaseline;
        }
        case C[11] || CT.C11:
        {
          return dart.nullCheck(this[_paragraph]).ideographicBaseline;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
    get didExceedMaxLines() {
      if (!!dart.test(this[_needsLayout])) dart.assertFailed(null, I[6], 546, 12, "!_needsLayout");
      return dart.nullCheck(this[_paragraph]).didExceedMaxLines;
    }
    layout(opts) {
      let minWidth = opts && 'minWidth' in opts ? opts.minWidth : 0;
      if (minWidth == null) dart.nullFailed(I[6], 561, 24, "minWidth");
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : 1 / 0;
      if (maxWidth == null) dart.nullFailed(I[6], 561, 47, "maxWidth");
      if (!(this.text != null)) dart.assertFailed("TextPainter.text must be set to a non-null value before using the TextPainter.", I[6], 562, 12, "text != null");
      if (!(this.textDirection != null)) dart.assertFailed("TextPainter.textDirection must be set to a non-null value before using the TextPainter.", I[6], 563, 12, "textDirection != null");
      if (!dart.test(this[_needsLayout]) && minWidth == this[_lastMinWidth] && maxWidth == this[_lastMaxWidth]) return;
      this[_needsLayout] = false;
      if (this[_paragraph] == null) {
        let builder = ui.ParagraphBuilder.new(this[_createParagraphStyle]());
        dart.nullCheck(this[_text]).build(builder, {textScaleFactor: this.textScaleFactor, dimensions: this[_placeholderDimensions]});
        this[_inlinePlaceholderScales] = builder.placeholderScales;
        this[_paragraph] = builder.build();
      }
      this[_lastMinWidth] = minWidth;
      this[_lastMaxWidth] = maxWidth;
      this[_previousCaretPosition] = null;
      this[_previousCaretPrototype] = null;
      dart.nullCheck(this[_paragraph]).layout(new ui.ParagraphConstraints.new({width: maxWidth}));
      if (minWidth != maxWidth) {
        let newWidth = null;
        switch (this.textWidthBasis) {
          case C[6] || CT.C6:
          {
            newWidth = this[_applyFloatingPointHack](dart.nullCheck(this[_paragraph]).longestLine);
            break;
          }
          case C[5] || CT.C5:
          {
            newWidth = this.maxIntrinsicWidth;
            break;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
        newWidth = newWidth[$clamp](minWidth, maxWidth);
        if (newWidth != this[_applyFloatingPointHack](dart.nullCheck(this[_paragraph]).width)) {
          dart.nullCheck(this[_paragraph]).layout(new ui.ParagraphConstraints.new({width: newWidth}));
        }
      }
      this[_inlinePlaceholderBoxes] = dart.nullCheck(this[_paragraph]).getBoxesForPlaceholders();
    }
    paint(canvas, offset) {
      if (canvas == null) dart.nullFailed(I[6], 614, 21, "canvas");
      if (offset == null) dart.nullFailed(I[6], 614, 36, "offset");
      if (!dart.test(dart.fn(() => {
        if (dart.test(this[_needsLayout])) {
          dart.throw(assertions.FlutterError.new("TextPainter.paint called when text geometry was not yet calculated.\n" + "Please call layout() before paint() to position the text before painting it."));
        }
        return true;
      }, T.VoidTobool())())) dart.assertFailed(null, I[6], 615, 12, "() {\r\n      if (_needsLayout) {\r\n        throw FlutterError(\r\n          'TextPainter.paint called when text geometry was not yet calculated.\\n'\r\n          'Please call layout() before paint() to position the text before painting it.'\r\n        );\r\n      }\r\n      return true;\r\n    }()");
      canvas.drawParagraph(dart.nullCheck(this[_paragraph]), offset);
    }
    static _isUtf16Surrogate(value) {
      if (value == null) dart.nullFailed(I[6], 632, 37, "value");
      return (dart.notNull(value) & 63488) === 55296;
    }
    static _isUnicodeDirectionality(value) {
      if (value == null) dart.nullFailed(I[6], 640, 44, "value");
      return value === 8207 || value === 8206;
    }
    getOffsetAfter(offset) {
      if (offset == null) dart.nullFailed(I[6], 646, 27, "offset");
      let nextCodeUnit = dart.nullCheck(this[_text]).codeUnitAt(offset);
      if (nextCodeUnit == null) return null;
      return dart.test(text_painter.TextPainter._isUtf16Surrogate(nextCodeUnit)) ? dart.notNull(offset) + 2 : dart.notNull(offset) + 1;
    }
    getOffsetBefore(offset) {
      if (offset == null) dart.nullFailed(I[6], 656, 28, "offset");
      let prevCodeUnit = dart.nullCheck(this[_text]).codeUnitAt(dart.notNull(offset) - 1);
      if (prevCodeUnit == null) return null;
      return dart.test(text_painter.TextPainter._isUtf16Surrogate(prevCodeUnit)) ? dart.notNull(offset) - 2 : dart.notNull(offset) - 1;
    }
    [_getRectFromUpstream](offset, caretPrototype) {
      if (offset == null) dart.nullFailed(I[6], 669, 34, "offset");
      if (caretPrototype == null) dart.nullFailed(I[6], 669, 47, "caretPrototype");
      let flattenedText = dart.nullCheck(this[_text]).toPlainText({includePlaceholders: false});
      let prevCodeUnit = dart.nullCheck(this[_text]).codeUnitAt(math.max(core.int, 0, dart.notNull(offset) - 1));
      if (prevCodeUnit == null) return null;
      let needsSearch = dart.test(text_painter.TextPainter._isUtf16Surrogate(prevCodeUnit)) || dart.nullCheck(this[_text]).codeUnitAt(offset) === 8205 || dart.test(text_painter.TextPainter._isUnicodeDirectionality(prevCodeUnit));
      let graphemeClusterLength = needsSearch ? 2 : 1;
      let boxes = T.JSArrayOfTextBox().of([]);
      while (dart.test(boxes[$isEmpty])) {
        let prevRuneOffset = dart.notNull(offset) - graphemeClusterLength;
        boxes = dart.nullCheck(this[_paragraph]).getBoxesForRange(prevRuneOffset, offset, {boxHeightStyle: ui.BoxHeightStyle.strut});
        if (dart.test(boxes[$isEmpty])) {
          if (!needsSearch) {
            break;
          }
          if (prevRuneOffset < -flattenedText.length) {
            break;
          }
          graphemeClusterLength = graphemeClusterLength * 2;
          continue;
        }
        let box = boxes[$first];
        if (prevCodeUnit === 10) {
          return new ui.Rect.fromLTRB(this[_emptyOffset].dx, box.bottom, this[_emptyOffset].dx, dart.notNull(box.bottom) + dart.notNull(box.bottom) - dart.notNull(box.top));
        }
        let caretEnd = box.end;
        let dx = box.direction == ui.TextDirection.rtl ? dart.notNull(caretEnd) - dart.notNull(caretPrototype.width) : caretEnd;
        return new ui.Rect.fromLTRB(math.min(core.double, dx, dart.nullCheck(this[_paragraph]).width), box.top, math.min(core.double, dx, dart.nullCheck(this[_paragraph]).width), box.bottom);
      }
      return null;
    }
    [_getRectFromDownstream](offset, caretPrototype) {
      if (offset == null) dart.nullFailed(I[6], 718, 36, "offset");
      if (caretPrototype == null) dart.nullFailed(I[6], 718, 49, "caretPrototype");
      let flattenedText = dart.nullCheck(this[_text]).toPlainText({includePlaceholders: false});
      let nextCodeUnit = dart.nullCheck(this[_text]).codeUnitAt(math.min(core.int, offset, flattenedText.length - 1));
      if (nextCodeUnit == null) return null;
      let needsSearch = dart.test(text_painter.TextPainter._isUtf16Surrogate(nextCodeUnit)) || nextCodeUnit === 8205 || dart.test(text_painter.TextPainter._isUnicodeDirectionality(nextCodeUnit));
      let graphemeClusterLength = needsSearch ? 2 : 1;
      let boxes = T.JSArrayOfTextBox().of([]);
      while (dart.test(boxes[$isEmpty])) {
        let nextRuneOffset = dart.notNull(offset) + graphemeClusterLength;
        boxes = dart.nullCheck(this[_paragraph]).getBoxesForRange(offset, nextRuneOffset, {boxHeightStyle: ui.BoxHeightStyle.strut});
        if (dart.test(boxes[$isEmpty])) {
          if (!needsSearch) {
            break;
          }
          if (nextRuneOffset >= flattenedText.length << 1 >>> 0) {
            break;
          }
          graphemeClusterLength = graphemeClusterLength * 2;
          continue;
        }
        let box = boxes[$last];
        let caretStart = box.start;
        let dx = box.direction == ui.TextDirection.rtl ? dart.notNull(caretStart) - dart.notNull(caretPrototype.width) : caretStart;
        return new ui.Rect.fromLTRB(math.min(core.double, dx, dart.nullCheck(this[_paragraph]).width), box.top, math.min(core.double, dx, dart.nullCheck(this[_paragraph]).width), box.bottom);
      }
      return null;
    }
    get [_emptyOffset]() {
      if (!!dart.test(this[_needsLayout])) dart.assertFailed(null, I[6], 759, 12, "!_needsLayout");
      if (!(this.textAlign != null)) dart.assertFailed(null, I[6], 760, 12, "textAlign != null");
      switch (this.textAlign) {
        case C[12] || CT.C12:
        {
          return ui.Offset.zero;
        }
        case C[13] || CT.C13:
        {
          return new ui.Offset.new(this.width, 0.0);
        }
        case C[14] || CT.C14:
        {
          return new ui.Offset.new(dart.notNull(this.width) / 2.0, 0.0);
        }
        case C[17] || CT.C17:
        case C[8] || CT.C8:
        {
          if (!(this.textDirection != null)) dart.assertFailed(null, I[6], 770, 16, "textDirection != null");
          switch (dart.nullCheck(this.textDirection)) {
            case C[15] || CT.C15:
            {
              return new ui.Offset.new(this.width, 0.0);
            }
            case C[16] || CT.C16:
            {
              return ui.Offset.zero;
            }
            default:
            {
              dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
            }
          }
        }
        case C[18] || CT.C18:
        {
          if (!(this.textDirection != null)) dart.assertFailed(null, I[6], 778, 16, "textDirection != null");
          switch (dart.nullCheck(this.textDirection)) {
            case C[15] || CT.C15:
            {
              return ui.Offset.zero;
            }
            case C[16] || CT.C16:
            {
              return new ui.Offset.new(this.width, 0.0);
            }
            default:
            {
              dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
            }
          }
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
    getOffsetForCaret(position, caretPrototype) {
      if (position == null) dart.nullFailed(I[6], 791, 41, "position");
      if (caretPrototype == null) dart.nullFailed(I[6], 791, 56, "caretPrototype");
      this[_computeCaretMetrics](position, caretPrototype);
      return this[_caretMetrics].offset;
    }
    getFullHeightForCaret(position, caretPrototype) {
      if (position == null) dart.nullFailed(I[6], 801, 46, "position");
      if (caretPrototype == null) dart.nullFailed(I[6], 801, 61, "caretPrototype");
      this[_computeCaretMetrics](position, caretPrototype);
      return this[_caretMetrics].fullHeight;
    }
    get [_caretMetrics]() {
      let t0;
      return dart.test(this[__TextPainter__caretMetrics_isSet]) ? (t0 = this[__TextPainter__caretMetrics], t0) : dart.throw(new _internal.LateError.fieldNI("_caretMetrics"));
    }
    set [_caretMetrics](t0) {
      if (t0 == null) dart.nullFailed(I[6], 809, 22, "null");
      this[__TextPainter__caretMetrics_isSet] = true;
      this[__TextPainter__caretMetrics] = t0;
    }
    [_computeCaretMetrics](position, caretPrototype) {
      let t1, t1$;
      if (position == null) dart.nullFailed(I[6], 819, 42, "position");
      if (caretPrototype == null) dart.nullFailed(I[6], 819, 57, "caretPrototype");
      if (!!dart.test(this[_needsLayout])) dart.assertFailed(null, I[6], 820, 12, "!_needsLayout");
      if (dart.equals(position, this[_previousCaretPosition]) && dart.equals(caretPrototype, this[_previousCaretPrototype])) return;
      let offset = position.offset;
      if (!(position.affinity != null)) dart.assertFailed(null, I[6], 824, 12, "position.affinity != null");
      let rect = null;
      switch (position.affinity) {
        case C[19] || CT.C19:
        {
          {
            rect = (t1 = this[_getRectFromUpstream](offset, caretPrototype), t1 == null ? this[_getRectFromDownstream](offset, caretPrototype) : t1);
            break;
          }
        }
        case C[20] || CT.C20:
        {
          {
            rect = (t1$ = this[_ge